/*
    private static final String PHRASE_DELIMITER = " ";
    public static final Integer MAX_PHRASE_LENGTH = 10;
    public static final Integer MIN_PHRASE_LENGTH = 2;
    public HashMap<String, Integer> phraseTable = new HashMap<String, Integer>();

for (sentence : document)
{
	String[] sentenceArray = arrayifySentence(sentence);
	processSentenceArray(sentenceArray);
}

private static void processSentenceArray(String[] sentenceArray)
{
	int maxPhraseLength = MAX_PHRASE_LENGTH;

	if (sentenceArray.length < maxPhraseLength)
	{
		maxPhraseLength = sentenceArray.length;
	}

	Integer phraseLength = MIN_PHRASE_LENGTH;

	for (phraseLength; phraseLength < maxPhraseLength; phraseLength++)
	{
		chopSentenceArray(sentenceArray, phraseLength)
	}
}
*/

private static void chopSentenceArray(String[] sentenceArray, Integer phraseLength)
{
    int phraseStartPosition = 0

    while (phraseStartPosition <= sentenceArray.length )
    {
        try
        {
        	if (sentenceArray[j + (phraseLength-1)] != null)
        	{
                int k = phraseStartPosition;
        		String hashEntry = new String();
        		for (k = startPosition; k < startPosition + (phraseLength - 1); k++)
        		{
        			hashentry += sentenceArray[k] + delimiter;
        		}

                addToPhraseTable(hashEntry);
            	phraseTable.put(hashEntry, number);
            }
        	else
            {
                continue;
            }
        }
        catch (ArrayIndexOutOfBoundsException aiobe)
        {
            System.out.println(aiobe);
        }

        phraseStartPosition++;
        }
    }
}

private static void addToPhraseTable(String hashEntry)
{
    if (phraseTable.containsKey(hashEntry))
    {
        phraseTable.put(hashEntry, allPrimerReads.get(primer) + 1);
    }
    else
    {
        allPrimerReads.put(primer, 1);
    }
}



